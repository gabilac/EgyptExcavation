// <auto-generated />
using System;
using EgyptExcavation.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EgyptExcavation.Migrations
{
    [DbContext(typeof(EgyptDbContext))]
    [Migration("20210414032509_Go")]
    partial class Go
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EgyptExcavation.Models.BioSample", b =>
                {
                    b.Property<int>("BioSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Bag")
                        .HasColumnType("integer");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<bool?>("PreviouslySampled")
                        .HasColumnType("boolean");

                    b.Property<string>("ResearcherInitials")
                        .HasColumnType("text");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer");

                    b.HasKey("BioSampleId");

                    b.ToTable("BioSamples");
                });

            modelBuilder.Entity("EgyptExcavation.Models.Burial", b =>
                {
                    b.Property<int>("BurialKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AgeCategory")
                        .HasColumnType("text");

                    b.Property<string>("AgeMethod")
                        .HasColumnType("text");

                    b.Property<string>("AgeRange")
                        .HasColumnType("text");

                    b.Property<string>("ArtifactDesc")
                        .HasColumnType("text");

                    b.Property<bool?>("ArtifactFound")
                        .HasColumnType("boolean");

                    b.Property<string>("BasilarSuture")
                        .HasColumnType("text");

                    b.Property<decimal?>("BasionBregmaHeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BasionNasion")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BasionProsthionLength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BizygomaticDiameter")
                        .HasColumnType("numeric");

                    b.Property<int?>("BodyAnalysis")
                        .HasColumnType("integer");

                    b.Property<string>("BodyColGender")
                        .HasColumnType("text");

                    b.Property<bool?>("BoneTaken")
                        .HasColumnType("boolean");

                    b.Property<string>("BurialCompositeId")
                        .HasColumnType("text");

                    b.Property<bool?>("BurialMaterials")
                        .HasColumnType("boolean");

                    b.Property<string>("BurialNo")
                        .HasColumnType("text");

                    b.Property<string>("BurialType")
                        .HasColumnType("text");

                    b.Property<string>("BurialWrapping")
                        .HasColumnType("text");

                    b.Property<bool?>("ButtonOsteoma")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Byusample")
                        .HasColumnType("boolean");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Cluster")
                        .HasColumnType("text");

                    b.Property<string>("CranialSuture")
                        .HasColumnType("text");

                    b.Property<bool?>("CribraOrbitala")
                        .HasColumnType("boolean");

                    b.Property<int?>("DayExcavated")
                        .HasColumnType("integer");

                    b.Property<int?>("DayFound")
                        .HasColumnType("integer");

                    b.Property<string>("DecheckerInitials")
                        .HasColumnType("text");

                    b.Property<string>("DeexpertInitials")
                        .HasColumnType("text");

                    b.Property<decimal?>("Depth")
                        .HasColumnType("numeric");

                    b.Property<int?>("DorsalPitting")
                        .HasColumnType("integer");

                    b.Property<string>("EpiphysealUnion")
                        .HasColumnType("text");

                    b.Property<decimal?>("EstimatedAge")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EstimatedHeight")
                        .HasColumnType("numeric");

                    b.Property<string>("ExcavationRecorder")
                        .HasColumnType("text");

                    b.Property<string>("FaceBundle")
                        .HasColumnType("text");

                    b.Property<decimal?>("FemurHead")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemurLength")
                        .HasColumnType("numeric");

                    b.Property<string>("FieldBook")
                        .HasColumnType("text");

                    b.Property<string>("FieldBookPage")
                        .HasColumnType("text");

                    b.Property<int?>("ForemanMagnum")
                        .HasColumnType("integer");

                    b.Property<decimal?>("GeFunctionTotal")
                        .HasColumnType("numeric");

                    b.Property<string>("GeGender")
                        .HasColumnType("text");

                    b.Property<int?>("Gonian")
                        .HasColumnType("integer");

                    b.Property<string>("Goods")
                        .HasColumnType("text");

                    b.Property<string>("HairColor")
                        .HasColumnType("text");

                    b.Property<bool?>("HairTaken")
                        .HasColumnType("boolean");

                    b.Property<string>("HeadDirection")
                        .HasColumnType("text");

                    b.Property<int?>("HillArea")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HumerusHead")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HumerusLength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("InterOrbitalBreadth")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("LengthofRemains")
                        .HasColumnType("numeric");

                    b.Property<bool?>("LinearHypoplasiaEnamel")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxCranialBreadth")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxCranialLength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxNasalBreadth")
                        .HasColumnType("numeric");

                    b.Property<int?>("MedialIpramus")
                        .HasColumnType("integer");

                    b.Property<bool?>("MetopicSuture")
                        .HasColumnType("boolean");

                    b.Property<string>("MonthExcavated")
                        .HasColumnType("text");

                    b.Property<string>("MonthFound")
                        .HasColumnType("text");

                    b.Property<decimal?>("NasionProsthion")
                        .HasColumnType("numeric");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("NuchalCrest")
                        .HasColumnType("integer");

                    b.Property<decimal?>("OrbitEdge")
                        .HasColumnType("numeric");

                    b.Property<string>("OsteologyNotes")
                        .HasColumnType("text");

                    b.Property<string>("OsteologyUnknown")
                        .HasColumnType("text");

                    b.Property<string>("Osteophytosis")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParietalBossing")
                        .HasColumnType("numeric");

                    b.Property<string>("PathologyAnomolies")
                        .HasColumnType("text");

                    b.Property<string>("PhLocation")
                        .HasColumnType("text");

                    b.Property<bool?>("PhotoTaken")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PoroticHypertosis")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PostcraniaMagazine")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PostcraniaTrauma")
                        .HasColumnType("boolean");

                    b.Property<int?>("PrearSulcus")
                        .HasColumnType("integer");

                    b.Property<int?>("PreservationIndex")
                        .HasColumnType("integer");

                    b.Property<string>("PreservationNotes")
                        .HasColumnType("text");

                    b.Property<int?>("PubicBone")
                        .HasColumnType("integer");

                    b.Property<int?>("PubicSymphysis")
                        .HasColumnType("integer");

                    b.Property<string>("Quadrant")
                        .HasColumnType("text");

                    b.Property<string>("RackShelf")
                        .HasColumnType("text");

                    b.Property<int?>("Robust")
                        .HasColumnType("integer");

                    b.Property<string>("SampleDesc")
                        .HasColumnType("text");

                    b.Property<int?>("SampleNo")
                        .HasColumnType("integer");

                    b.Property<bool?>("SampleTaken")
                        .HasColumnType("boolean");

                    b.Property<int?>("SciaticNotch")
                        .HasColumnType("integer");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<string>("SexMethod")
                        .HasColumnType("text");

                    b.Property<string>("Shaft")
                        .HasColumnType("text");

                    b.Property<string>("SharedShaft")
                        .HasColumnType("text");

                    b.Property<int?>("SkullDay")
                        .HasColumnType("integer");

                    b.Property<bool?>("SkullMagazine")
                        .HasColumnType("boolean");

                    b.Property<string>("SkullMonth")
                        .HasColumnType("text");

                    b.Property<bool?>("SkullTrauma")
                        .HasColumnType("boolean");

                    b.Property<int?>("SkullYear")
                        .HasColumnType("integer");

                    b.Property<bool?>("SoftTissueTaken")
                        .HasColumnType("boolean");

                    b.Property<int?>("SquareId")
                        .HasColumnType("integer");

                    b.Property<int?>("StoFeet")
                        .HasColumnType("integer");

                    b.Property<int?>("StoHead")
                        .HasColumnType("integer");

                    b.Property<int?>("SubPubicAngle")
                        .HasColumnType("integer");

                    b.Property<int?>("SupraOrbitalRidges")
                        .HasColumnType("integer");

                    b.Property<bool?>("TextileTaken")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("TibiaLength")
                        .HasColumnType("numeric");

                    b.Property<bool?>("TmjOa")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ToConfirm")
                        .HasColumnType("boolean");

                    b.Property<int?>("TombNo")
                        .HasColumnType("integer");

                    b.Property<int?>("ToothAttrition")
                        .HasColumnType("integer");

                    b.Property<string>("ToothEruption")
                        .HasColumnType("text");

                    b.Property<bool?>("ToothTaken")
                        .HasColumnType("boolean");

                    b.Property<int?>("VentralArc")
                        .HasColumnType("integer");

                    b.Property<int?>("WtoFeet")
                        .HasColumnType("integer");

                    b.Property<int?>("WtoHead")
                        .HasColumnType("integer");

                    b.Property<int?>("YearExcavated")
                        .HasColumnType("integer");

                    b.Property<int?>("YearFound")
                        .HasColumnType("integer");

                    b.Property<int?>("ZygomaticCrest")
                        .HasColumnType("integer");

                    b.HasKey("BurialKey");

                    b.ToTable("Burials");
                });

            modelBuilder.Entity("EgyptExcavation.Models.Sample", b =>
                {
                    b.Property<int>("SampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Area")
                        .HasColumnType("integer");

                    b.Property<string>("AvgCalibratedCalendarDate")
                        .HasColumnType("text");

                    b.Property<int?>("BioSampleId")
                        .HasColumnType("integer");

                    b.Property<int>("BurialKey")
                        .HasColumnType("integer");

                    b.Property<int?>("C14sample")
                        .HasColumnType("integer");

                    b.Property<int?>("CalendarDate14C")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int?>("ConventionalAgeBp")
                        .HasColumnType("integer");

                    b.Property<int?>("Foci")
                        .HasColumnType("integer");

                    b.Property<string>("LocationDesc")
                        .HasColumnType("text");

                    b.Property<int?>("MaxCalibratedCalendarDate")
                        .HasColumnType("integer");

                    b.Property<int?>("MinCalibratedCalendarDate")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int?>("Rack")
                        .HasColumnType("integer");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<int?>("SpanCalibratedCalendarDate")
                        .HasColumnType("integer");

                    b.Property<int?>("TextileId")
                        .HasColumnType("integer");

                    b.Property<int?>("TubeNo")
                        .HasColumnType("integer");

                    b.HasKey("SampleId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EgyptExcavation.Models.Square", b =>
                {
                    b.Property<int>("SquareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Ew")
                        .HasColumnType("text");

                    b.Property<int?>("EwDistance")
                        .HasColumnType("integer");

                    b.Property<string>("Ns")
                        .HasColumnType("text");

                    b.Property<int?>("NsDistance")
                        .HasColumnType("integer");

                    b.HasKey("SquareId");

                    b.ToTable("Squares");
                });

            modelBuilder.Entity("EgyptExcavation.Models.Textile", b =>
                {
                    b.Property<int>("TextileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalysisDate")
                        .HasColumnType("text");

                    b.Property<string>("AnalysisType")
                        .HasColumnType("text");

                    b.Property<string>("Analyst")
                        .HasColumnType("text");

                    b.Property<string>("Angle")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<bool?>("Copy")
                        .HasColumnType("boolean");

                    b.Property<string>("Count")
                        .HasColumnType("text");

                    b.Property<string>("Decoration")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Dimension")
                        .HasColumnType("text");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<string>("Manipulation")
                        .HasColumnType("text");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("OriginEstimate")
                        .HasColumnType("text");

                    b.Property<string>("PhotoDate")
                        .HasColumnType("text");

                    b.Property<string>("Ply")
                        .HasColumnType("text");

                    b.Property<int?>("SampleId")
                        .HasColumnType("integer");

                    b.Property<string>("SampledDate")
                        .HasColumnType("text");

                    b.Property<string>("ScientificDate")
                        .HasColumnType("text");

                    b.Property<string>("Structure")
                        .HasColumnType("text");

                    b.Property<string>("Thickness")
                        .HasColumnType("text");

                    b.HasKey("TextileId");

                    b.ToTable("Textiles");
                });
#pragma warning restore 612, 618
        }
    }
}
